"""
==========================================
GOOGLE DRIVE API ENDPOINTS - FIXED
==========================================
Bestandslocatie: backend/app/api/drive.py
Full Path: C:/Users/DASAP/Documents/social_media_poster/backend/app/api/drive.py

Google Drive integration endpoints:
- Setup (initialize workspace folder structure)
- Status (check workspace setup completion)
- Verify folder (check if folder exists)
- Workspace-specific Drive operations

✅ WORKSPACE ISOLATION: Each workspace has its own Drive folder
✅ USER OAUTH: Uses user's Google Drive (not Service Account)
✅ FRONTEND FIX: Returns credentials_configured and service_available fields
"""

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import Optional
import httpx

from ..core.database import get_db
from ..services.drive_service import DriveService
from ..models.workspace import Workspace
from ..models.user import User, AuditLog
from .dependencies import get_current_user, get_current_workspace


router = APIRouter(prefix="/drive", tags=["google-drive"])


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

def get_drive_service(current_user: User) -> DriveService:
    """
    Get initialized DriveService instance using user's OAuth token
    
    Args:
        current_user: Authenticated user with Google OAuth token
        
    Returns:
        DriveService instance
        
    Raises:
        HTTPException if user doesn't have valid Google access token
    """
    if not current_user.google_access_token:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="No Google Drive access. Please login again."
        )
    
    try:
        return DriveService(access_token=current_user.google_access_token)
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Google Drive service not available: {str(e)}"
        )


# ============================================================================
# WORKSPACE DRIVE SETUP
# ============================================================================

@router.post("/setup")
async def setup_workspace_drive_structure(
    workspace: Workspace = Depends(get_current_workspace),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Setup Google Drive folder structure for workspace
    
    ✅ Workspace Isolated: Each workspace gets its own Drive folder
    ✅ User's Drive: Creates folder in authenticated user's Google Drive
    
    This endpoint:
    1. Creates workspace folder in user's Drive
    2. Saves folder ID to workspace
    3. Marks workspace setup as complete
    
    Folder structure:
    - SOCIAL_MEDIA_POSTER/
      └── {workspace_name}/
          ├── Customers/
          └── Events/
    
    Returns folder ID and web link
    """
    try:
        print(f"\n📁 Setting up Google Drive for workspace...")
        print(f"   Workspace: {workspace.name}")
        print(f"   User: {current_user.email}")
        
        # Check if workspace already has Drive setup
        if workspace.drive_folder_id:
            print(f"⚠️  Workspace already has Drive folder")
            print(f"   Folder ID: {workspace.drive_folder_id}")
            
            return {
                "success": True,  # ✅ Added for frontend
                "message": "Workspace Drive folder already configured",
                "already_setup": True,
                "folder_id": workspace.drive_folder_id,
                "folder_name": workspace.drive_folder_name or "SOCIAL_MEDIA_POSTER",
                "workspace_name": workspace.name,
                "folder_link": f"https://drive.google.com/drive/folders/{workspace.drive_folder_id}"
            }
        
        # Get Drive service with user's OAuth token
        drive_service = get_drive_service(current_user)
        
        # Step 1: Find or create main "SOCIAL_MEDIA_POSTER" folder
        print(f"   Looking for main SOCIAL_MEDIA_POSTER folder...")
        main_folder = await drive_service.find_folder_by_name("SOCIAL_MEDIA_POSTER")
        
        if main_folder:
            print(f"✅ Found existing main folder: {main_folder['id']}")
            main_folder_id = main_folder['id']
        else:
            print(f"   Creating main SOCIAL_MEDIA_POSTER folder...")
            main_folder_data = await drive_service.create_folder(
                folder_name="SOCIAL_MEDIA_POSTER",
                parent_id=None  # Root
            )
            main_folder_id = main_folder_data['id']
            print(f"✅ Created main folder: {main_folder_id}")
        
        # Step 2: Use main folder as workspace folder (no subfolders needed!)
        # In the dynamic event system:
        # - Customers are created directly under SOCIAL_MEDIA_POSTER
        # - Events are created directly under their customer folder
        # - No need for generic Customers/Events subfolders
        
        workspace_folder_id = main_folder_id
        workspace_folder_name = "SOCIAL_MEDIA_POSTER"
        
        print(f"✅ Using main folder as workspace folder: {workspace_folder_id}")
        print(f"   No subfolders created - using dynamic folder system")
        print(f"   📁 Customers will be created directly under this folder")
        print(f"   📁 Events will be created directly under customer folders")
        
        # Step 3: Update workspace with folder ID
        workspace.drive_folder_id = workspace_folder_id
        workspace.drive_folder_name = workspace_folder_name
        workspace.drive_customers_folder_id = None  # Not needed in dynamic system
        workspace.drive_events_folder_id = None     # Not needed in dynamic system
        workspace.drive_setup_complete = True
        
        # Log the setup
        AuditLog.log(
            db=db,
            user_id=current_user.user_id,
            action="workspace_drive_setup",
            entity_type="workspace",
            entity_id=workspace.workspace_id,
            details={
                "workspace_name": workspace.name,
                "workspace_folder_id": workspace_folder_id,
                "system": "dynamic_events",
                "note": "No subfolders - customers and events created dynamically"
            }
        )
        
        db.commit()
        
        print(f"✅ Workspace Drive setup complete!")
        print(f"   📁 Main folder: {workspace_folder_name}")
        print(f"   🎯 Ready for dynamic customer/event creation")
        
        return {
            "success": True,
            "message": "Workspace Drive setup completed successfully",
            "workspace_id": str(workspace.workspace_id),
            "workspace_name": workspace.name,
            "folder_name": workspace_folder_name,
            "folder_link": f"https://drive.google.com/drive/folders/{workspace_folder_id}",
            "folder_id": workspace_folder_id,
            "setup_complete": True,
            "system": "dynamic_events",
            "note": "Customers and events will be created dynamically"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"❌ Drive setup error: {e}")
        import traceback
        traceback.print_exc()
        
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to setup Drive structure: {str(e)}"
        )


# ============================================================================
# WORKSPACE DRIVE STATUS - FIXED FOR FRONTEND
# ============================================================================

@router.get("/status")
async def get_workspace_drive_status(
    workspace: Workspace = Depends(get_current_workspace),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Check Google Drive setup status for workspace
    
    ✅ Workspace Specific: Shows status for current workspace only
    ✅ Frontend Compatible: Returns credentials_configured and service_available
    
    Returns:
    - Whether workspace Drive setup is complete
    - Folder IDs if configured
    - User's Google OAuth status
    - Folder links if available
    """
    try:
        # Check user's Google OAuth status
        has_google_token = bool(current_user.google_access_token)
        token_expired = False
        
        if has_google_token and current_user.token_expires_at:
            from datetime import datetime, timezone
            token_expired = datetime.now(timezone.utc) > current_user.token_expires_at
        
        # Get workspace Drive configuration
        setup_complete = workspace.drive_setup_complete or False
        workspace_folder_id = workspace.drive_folder_id
        
        # ✅ Calculate credentials_configured and service_available for frontend
        credentials_configured = has_google_token and not token_expired
        service_available = has_google_token and not token_expired
        
        response = {
            "workspace_id": str(workspace.workspace_id),
            "workspace_name": workspace.name,
            "setup_complete": setup_complete,
            "folder_id": workspace_folder_id,
            
            # ✅ Frontend expects these exact field names
            "credentials_configured": credentials_configured,
            "service_available": service_available,
            
            # Keep these for backwards compatibility
            "user_has_google_token": has_google_token,
            "google_token_expired": token_expired,
            
            "ready_for_use": setup_complete and has_google_token and not token_expired
        }
        
        # Add folder information if setup complete
        if setup_complete and workspace_folder_id:
            response["folder_name"] = workspace.drive_folder_name or "SOCIAL_MEDIA_POSTER"
            response["folder_link"] = f"https://drive.google.com/drive/folders/{workspace_folder_id}"
            
            response["folders"] = {
                "workspace": {
                    "id": workspace_folder_id,
                    "link": f"https://drive.google.com/drive/folders/{workspace_folder_id}"
                }
            }
            
            if workspace.drive_customers_folder_id:
                response["folders"]["customers"] = {
                    "id": workspace.drive_customers_folder_id,
                    "link": f"https://drive.google.com/drive/folders/{workspace.drive_customers_folder_id}"
                }
            
            if workspace.drive_events_folder_id:
                response["folders"]["events"] = {
                    "id": workspace.drive_events_folder_id,
                    "link": f"https://drive.google.com/drive/folders/{workspace.drive_events_folder_id}"
                }
        
        return response
        
    except Exception as e:
        print(f"❌ Error checking Drive status: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to check Drive status: {str(e)}"
        )


# ============================================================================
# VERIFY FOLDER
# ============================================================================

@router.post("/verify-folder")
async def verify_folder_exists(
    folder_id: str,
    current_user: User = Depends(get_current_user)
):
    """
    Verify if a Google Drive folder exists and is accessible
    
    ✅ Uses user's OAuth token to check access
    
    Parameters:
    - folder_id: Google Drive folder ID to verify
    
    Returns:
    - exists: Whether folder exists
    - accessible: Whether user can access it
    - folder_name: Name of folder if accessible
    """
    try:
        drive_service = get_drive_service(current_user)
        
        # Try to get folder info
        folder_info = await drive_service.get_folder_info(folder_id)
        
        if folder_info:
            return {
                "exists": True,
                "accessible": True,
                "folder_id": folder_id,
                "folder_name": folder_info.get('name'),
                "folder_link": folder_info.get('webViewLink'),
                "created_time": folder_info.get('createdTime'),
                "modified_time": folder_info.get('modifiedTime')
            }
        else:
            return {
                "exists": False,
                "accessible": False,
                "folder_id": folder_id,
                "error": "Folder not found or not accessible"
            }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"❌ Error verifying folder: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to verify folder: {str(e)}"
        )


# ============================================================================
# CREATE CUSTOMER FOLDER
# ============================================================================

@router.post("/create-customer-folder")
async def create_customer_folder(
    customer_id: str,
    customer_name: str,
    workspace: Workspace = Depends(get_current_workspace),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Create a Drive folder for a specific customer
    
    ✅ Workspace Isolated: Creates folder in workspace's Customers folder
    ✅ User's Drive: Uses user's OAuth token
    
    Args:
        customer_id: Customer UUID
        customer_name: Customer name for folder
    
    Returns:
        Folder info with ID and link
    """
    try:
        # Check if workspace has Drive setup
        if not workspace.drive_setup_complete or not workspace.drive_customers_folder_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Workspace Drive not set up. Please run /drive/setup first."
            )
        
        drive_service = get_drive_service(current_user)
        
        # Sanitize customer name for folder
        folder_name = customer_name.strip().replace(' ', '_')
        folder_name = ''.join(c for c in folder_name if c.isalnum() or c == '_')
        
        # Create folder in workspace's Customers folder
        folder = await drive_service.create_folder(
            folder_name=folder_name,
            parent_id=workspace.drive_customers_folder_id
        )
        
        # Log the creation
        AuditLog.log(
            db=db,
            user_id=current_user.user_id,
            action="customer_folder_created",
            entity_type="customer",
            entity_id=customer_id,
            details={
                "folder_id": folder['id'],
                "folder_name": folder_name,
                "workspace_id": str(workspace.workspace_id)
            }
        )
        
        db.commit()
        
        return {
            "folder_id": folder['id'],
            "folder_name": folder['name'],
            "folder_link": folder['webViewLink'],
            "parent_folder_id": workspace.drive_customers_folder_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"❌ Error creating customer folder: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to create customer folder: {str(e)}"
        )


# ============================================================================
# CREATE EVENT FOLDER
# ============================================================================

@router.post("/create-event-folder")
async def create_event_folder(
    event_id: str,
    event_name: str,
    customer_folder_id: Optional[str] = None,
    workspace: Workspace = Depends(get_current_workspace),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Create a Drive folder for a specific event
    
    ✅ Workspace Isolated: Creates folder in workspace's Events folder or customer folder
    ✅ User's Drive: Uses user's OAuth token
    
    Args:
        event_id: Event UUID
        event_name: Event name for folder
        customer_folder_id: Optional - create in customer's folder instead of Events folder
    
    Returns:
        Folder info with ID and link
    """
    try:
        # Check if workspace has Drive setup
        if not workspace.drive_setup_complete:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Workspace Drive not set up. Please run /drive/setup first."
            )
        
        drive_service = get_drive_service(current_user)
        
        # Sanitize event name for folder
        folder_name = event_name.strip().replace(' ', '_')
        folder_name = ''.join(c for c in folder_name if c.isalnum() or c == '_')
        
        # Determine parent folder
        if customer_folder_id:
            parent_id = customer_folder_id
        else:
            if not workspace.drive_events_folder_id:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Workspace Events folder not configured"
                )
            parent_id = workspace.drive_events_folder_id
        
        # Create folder
        folder = await drive_service.create_folder(
            folder_name=folder_name,
            parent_id=parent_id
        )
        
        # Create subfolders for event
        photos_folder = await drive_service.create_folder(
            folder_name="Photos",
            parent_id=folder['id']
        )
        
        # Log the creation
        AuditLog.log(
            db=db,
            user_id=current_user.user_id,
            action="event_folder_created",
            entity_type="event",
            entity_id=event_id,
            details={
                "folder_id": folder['id'],
                "folder_name": folder_name,
                "photos_folder_id": photos_folder['id'],
                "workspace_id": str(workspace.workspace_id)
            }
        )
        
        db.commit()
        
        return {
            "folder_id": folder['id'],
            "folder_name": folder['name'],
            "folder_link": folder['webViewLink'],
            "photos_folder_id": photos_folder['id'],
            "photos_folder_link": photos_folder['webViewLink'],
            "parent_folder_id": parent_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"❌ Error creating event folder: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to create event folder: {str(e)}"
        )


# ============================================================================
# RESET WORKSPACE SETUP (Admin/Development)
# ============================================================================

@router.post("/reset-setup")
async def reset_workspace_drive_setup(
    confirm: bool = False,
    workspace: Workspace = Depends(get_current_workspace),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Reset workspace Drive setup configuration
    
    ⚠️  WARNING: This only resets database configuration.
    Folders in Google Drive will remain. Use this if you need to
    reconfigure without creating duplicate folders.
    
    Parameters:
    - confirm: Must be true to proceed
    
    For development/testing only
    """
    if not confirm:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Must confirm reset by setting confirm=true"
        )
    
    try:
        print(f"\n⚠️  Resetting workspace Drive setup...")
        print(f"   Workspace: {workspace.name}")
        print(f"   User: {current_user.email}")
        
        # Get current values for logging
        old_folder_id = workspace.drive_folder_id
        
        # Reset configuration
        workspace.drive_folder_id = None
        workspace.drive_folder_name = None
        workspace.drive_customers_folder_id = None  # ✅ Also reset these
        workspace.drive_events_folder_id = None     # ✅ Also reset these
        workspace.drive_setup_complete = False
        
        # Log the reset
        AuditLog.log(
            db=db,
            user_id=current_user.user_id,
            action="workspace_drive_reset",
            entity_type="workspace",
            entity_id=workspace.workspace_id,
            details={
                "workspace_name": workspace.name,
                "previous_folder_id": old_folder_id,
                "warning": "Folders not deleted from Drive"
            }
        )
        
        db.commit()
        
        print(f"✅ Workspace Drive setup reset")
        print(f"   Previous folder: {old_folder_id}")
        print(f"   ⚠️  Folders still exist in Google Drive!")
        
        return {
            "message": "Workspace Drive setup reset successfully",
            "workspace_id": str(workspace.workspace_id),
            "workspace_name": workspace.name,
            "warning": "Folders in Google Drive were NOT deleted",
            "previous_folder_id": old_folder_id,
            "can_setup_again": True
        }
        
    except Exception as e:
        print(f"❌ Reset error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to reset setup: {str(e)}"
        )


# ============================================================================
# HEALTH CHECK
# ============================================================================

@router.get("/health")
async def drive_health_check(
    current_user: User = Depends(get_current_user)
):
    """
    Check if Google Drive integration is healthy for current user
    
    Returns user's OAuth status
    """
    try:
        has_token = bool(current_user.google_access_token)
        token_expired = False
        
        if has_token and current_user.token_expires_at:
            from datetime import datetime, timezone
            token_expired = datetime.now(timezone.utc) > current_user.token_expires_at
        
        return {
            "status": "healthy" if (has_token and not token_expired) else "unhealthy",
            "user_email": current_user.email,
            "has_google_token": has_token,
            "token_expired": token_expired,
            "ready_for_drive": has_token and not token_expired
        }
        
    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }
